

# This file was *autogenerated* from the file solution.sage
from sage.all_cmdline import *   # import sage library

_sage_const_100 = Integer(100); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2); _sage_const_0 = Integer(0)
from pwn import *

l = _sage_const_100 

def coefficients(m, length):
  seq = [m]

  while len(seq) < length:
    seq.append(round(seq[-_sage_const_1 ]*m))

  return seq

# Setting up the shell

shell = process('./test.sh')
M = shell.recvline_startswith(b'[')
n = round(_sage_const_2 *pi/arccos(float(M.split(b' ')[_sage_const_2 ])))
theta = _sage_const_2 *pi/n

A = matrix(GF(n), _sage_const_0 , l)
b = []

# Receiving the data

for i in range(l):
  shell.recvline()
  shell.recvline()
  shell.sendline(str.encode(str(-i)))
  shell.recvline()
  M = shell.recvline()

  nums = [float(i) for i in re.findall(b"-?[\d]*[.][\d]+", M)]
  print(nums)
  r = round(arccos(nums[_sage_const_0 ])/theta)
  
  if nums[_sage_const_1 ] > _sage_const_0 :
    r = -r
  
  b.append(r)
  A = A.stack(matrix(GF(n), _sage_const_1 , l, coefficients(-i, l)))

b = vector(GF(n), b)

# Calculating the solution

print("Solution:")
sol = ''.join([chr(a) for a in A.solve_right(b)])
print(sol)

